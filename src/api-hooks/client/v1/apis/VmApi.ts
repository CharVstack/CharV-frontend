/* tslint:disable */
/* eslint-disable */
/**
 * CharVstack-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  GetApiV1Vms200Response,
  GetApiV1Vms200ResponseFromJSON,
  GetApiV1Vms200ResponseToJSON,
  PatchApiV1VmsVmIdRequest,
  PatchApiV1VmsVmIdRequestFromJSON,
  PatchApiV1VmsVmIdRequestToJSON,
  PostApiV1VmsRequest,
  PostApiV1VmsRequestFromJSON,
  PostApiV1VmsRequestToJSON,
  Vm,
  VmFromJSON,
  VmToJSON,
} from '../models';

export interface GetApiV1VmsVmIdRequest {
  vmId: string;
}

export interface PatchApiV1VmsVmIdOperationRequest {
  vmId: string;
  patchApiV1VmsVmIdRequest?: PatchApiV1VmsVmIdRequest;
}

export interface PostApiV1VmsOperationRequest {
  postApiV1VmsRequest?: PostApiV1VmsRequest;
}

/**
 * VmApi - interface
 *
 * @export
 * @interface VmApiInterface
 */
export interface VmApiInterface {
  /**
   *
   * @summary Get all VMs list
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VmApiInterface
   */
  getApiV1VmsRaw(
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<GetApiV1Vms200Response>>;

  /**
   * Get all VMs list
   */
  getApiV1Vms(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetApiV1Vms200Response>;

  /**
   *
   * @summary Get a VM
   * @param {string} vmId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VmApiInterface
   */
  getApiV1VmsVmIdRaw(
    requestParameters: GetApiV1VmsVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<Vm>>;

  /**
   * Get a VM
   */
  getApiV1VmsVmId(
    requestParameters: GetApiV1VmsVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<Vm>;

  /**
   *
   * @summary Update a VM
   * @param {string} vmId
   * @param {PatchApiV1VmsVmIdRequest} [patchApiV1VmsVmIdRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VmApiInterface
   */
  patchApiV1VmsVmIdRaw(
    requestParameters: PatchApiV1VmsVmIdOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Update a VM
   */
  patchApiV1VmsVmId(
    requestParameters: PatchApiV1VmsVmIdOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<void>;

  /**
   *
   * @summary Create a new VM
   * @param {PostApiV1VmsRequest} [postApiV1VmsRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VmApiInterface
   */
  postApiV1VmsRaw(
    requestParameters: PostApiV1VmsOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Create a new VM
   */
  postApiV1Vms(
    requestParameters: PostApiV1VmsOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<void>;
}

/**
 *
 */
export class VmApi extends runtime.BaseAPI implements VmApiInterface {
  /**
   * Get all VMs list
   */
  async getApiV1VmsRaw(
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<GetApiV1Vms200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/vms`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetApiV1Vms200ResponseFromJSON(jsonValue));
  }

  /**
   * Get all VMs list
   */
  async getApiV1Vms(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetApiV1Vms200Response> {
    const response = await this.getApiV1VmsRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get a VM
   */
  async getApiV1VmsVmIdRaw(
    requestParameters: GetApiV1VmsVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<Vm>> {
    if (requestParameters.vmId === null || requestParameters.vmId === undefined) {
      throw new runtime.RequiredError(
        'vmId',
        'Required parameter requestParameters.vmId was null or undefined when calling getApiV1VmsVmId.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/vms/{vmId}`.replace(`{${'vmId'}}`, encodeURIComponent(String(requestParameters.vmId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => VmFromJSON(jsonValue));
  }

  /**
   * Get a VM
   */
  async getApiV1VmsVmId(
    requestParameters: GetApiV1VmsVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<Vm> {
    const response = await this.getApiV1VmsVmIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update a VM
   */
  async patchApiV1VmsVmIdRaw(
    requestParameters: PatchApiV1VmsVmIdOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.vmId === null || requestParameters.vmId === undefined) {
      throw new runtime.RequiredError(
        'vmId',
        'Required parameter requestParameters.vmId was null or undefined when calling patchApiV1VmsVmId.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/vms/{vmId}`.replace(`{${'vmId'}}`, encodeURIComponent(String(requestParameters.vmId))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: PatchApiV1VmsVmIdRequestToJSON(requestParameters.patchApiV1VmsVmIdRequest),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update a VM
   */
  async patchApiV1VmsVmId(
    requestParameters: PatchApiV1VmsVmIdOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<void> {
    await this.patchApiV1VmsVmIdRaw(requestParameters, initOverrides);
  }

  /**
   * Create a new VM
   */
  async postApiV1VmsRaw(
    requestParameters: PostApiV1VmsOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/vms`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: PostApiV1VmsRequestToJSON(requestParameters.postApiV1VmsRequest),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Create a new VM
   */
  async postApiV1Vms(
    requestParameters: PostApiV1VmsOperationRequest = {},
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<void> {
    await this.postApiV1VmsRaw(requestParameters, initOverrides);
  }
}
