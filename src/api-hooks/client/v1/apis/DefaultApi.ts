/* tslint:disable */
/* eslint-disable */
/**
 * CharVstack-API
 * A sample API to illustrate OpenAPI concepts
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  GetApiV1Vm200Response,
  GetApiV1Vm200ResponseFromJSON,
  GetApiV1Vm200ResponseToJSON,
  GetVmVmId200Response,
  GetVmVmId200ResponseFromJSON,
  GetVmVmId200ResponseToJSON,
} from '../models';

export interface DeleteVmVmIdRequest {
  vmId: string;
}

export interface GetApiV1VmRequest {
  offset?: number;
  limit?: number;
}

export interface GetVmVmIdRequest {
  vmId: string;
}

export interface PatchVmsVmIdRequest {
  vmId: string;
}

/**
 * DefaultApi - interface
 *
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
  /**
   *
   * @summary VMの削除
   * @param {string} vmId VMのID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  deleteVmVmIdRaw(
    requestParameters: DeleteVmVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * VMの削除
   */
  deleteVmVmId(
    requestParameters: DeleteVmVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<void>;

  /**
   *
   * @summary VM一覧の取得
   * @param {number} [offset] レスポンスの開始位置
   * @param {number} [limit] レスポンスの終了位置
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  getApiV1VmRaw(
    requestParameters: GetApiV1VmRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<GetApiV1Vm200Response>>;

  /**
   * VM一覧の取得
   */
  getApiV1Vm(
    requestParameters: GetApiV1VmRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<GetApiV1Vm200Response>;

  /**
   *
   * @summary VMの情報
   * @param {string} vmId VMのID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  getVmVmIdRaw(
    requestParameters: GetVmVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<GetVmVmId200Response>>;

  /**
   * VMの情報
   */
  getVmVmId(
    requestParameters: GetVmVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<GetVmVmId200Response>;

  /**
   *
   * @summary VMの更新
   * @param {string} vmId VMのID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  patchVmsVmIdRaw(
    requestParameters: PatchVmsVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * VMの更新
   */
  patchVmsVmId(
    requestParameters: PatchVmsVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<void>;

  /**
   *
   * @summary VMの作成
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  postApiV1VmRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>>;

  /**
   * VMの作成
   */
  postApiV1Vm(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void>;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {
  /**
   * VMの削除
   */
  async deleteVmVmIdRaw(
    requestParameters: DeleteVmVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.vmId === null || requestParameters.vmId === undefined) {
      throw new runtime.RequiredError(
        'vmId',
        'Required parameter requestParameters.vmId was null or undefined when calling deleteVmVmId.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/vms/{vmId}`.replace(`{${'vmId'}}`, encodeURIComponent(String(requestParameters.vmId))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * VMの削除
   */
  async deleteVmVmId(
    requestParameters: DeleteVmVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<void> {
    await this.deleteVmVmIdRaw(requestParameters, initOverrides);
  }

  /**
   * VM一覧の取得
   */
  async getApiV1VmRaw(
    requestParameters: GetApiV1VmRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<GetApiV1Vm200Response>> {
    const queryParameters: any = {};

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/vms`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetApiV1Vm200ResponseFromJSON(jsonValue));
  }

  /**
   * VM一覧の取得
   */
  async getApiV1Vm(
    requestParameters: GetApiV1VmRequest = {},
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<GetApiV1Vm200Response> {
    const response = await this.getApiV1VmRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * VMの情報
   */
  async getVmVmIdRaw(
    requestParameters: GetVmVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<GetVmVmId200Response>> {
    if (requestParameters.vmId === null || requestParameters.vmId === undefined) {
      throw new runtime.RequiredError(
        'vmId',
        'Required parameter requestParameters.vmId was null or undefined when calling getVmVmId.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/vms/{vmId}`.replace(`{${'vmId'}}`, encodeURIComponent(String(requestParameters.vmId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetVmVmId200ResponseFromJSON(jsonValue));
  }

  /**
   * VMの情報
   */
  async getVmVmId(
    requestParameters: GetVmVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<GetVmVmId200Response> {
    const response = await this.getVmVmIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * VMの更新
   */
  async patchVmsVmIdRaw(
    requestParameters: PatchVmsVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.vmId === null || requestParameters.vmId === undefined) {
      throw new runtime.RequiredError(
        'vmId',
        'Required parameter requestParameters.vmId was null or undefined when calling patchVmsVmId.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/vms/{vmId}`.replace(`{${'vmId'}}`, encodeURIComponent(String(requestParameters.vmId))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * VMの更新
   */
  async patchVmsVmId(
    requestParameters: PatchVmsVmIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<void> {
    await this.patchVmsVmIdRaw(requestParameters, initOverrides);
  }

  /**
   * VMの作成
   */
  async postApiV1VmRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/vms`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * VMの作成
   */
  async postApiV1Vm(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.postApiV1VmRaw(initOverrides);
  }
}
